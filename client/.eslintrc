{
    "plugins": [
        "jsx-control-statements"
    ],
    "extends": [
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        // "react-compiler",
        // "plugin:jsx-a11y/recommended"
    ],
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "env": {
        "browser": true,
        "jest": true,
        "jsx-control-statements/jsx-control-statements": true
    },
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "rules": {
        // "react-compiler/react-compiler": "error",
        "no-console": "warn",
        "jsx-quotes": [
            "warn",
            "prefer-single"
        ],
        "react/react-in-jsx-scope": "off",
        "import/export": "warn",
        "import/no-unresolved": [
            1, 
            { 
                "ignore": ["@[a-zA-Z]+"] 
            }
        ],
        "@typescript-eslint/no-empty-interface": [
            "warn",
            {
              "allowSingleExtends": false
            }
        ],
        "@typescript-eslint/no-non-null-assertion": 0,
        "react/prop-types": 0,
        // "react/jsx-one-expression-per-line": [1, { 
        //     "allow": "single-child" 
        // }],
        "react/jsx-curly-newline": [1, {
            "multiline": "consistent",
            "singleline": "consistent"
        }],
        "react/jsx-wrap-multilines": ["warn", {
            "declaration": "parens-new-line",
            "assignment": "parens-new-line",
            "return": "parens-new-line",
            "arrow": "parens-new-line",
            "condition": "parens-new-line",
            "logical": "parens-new-line",
            "prop": "parens-new-line"
        }],
        "jsx-control-statements/jsx-choose-not-empty": 1,
        "jsx-control-statements/jsx-for-require-each": 1,
        "jsx-control-statements/jsx-for-require-of": 1,
        "jsx-control-statements/jsx-for-require-body": 1,
        "jsx-control-statements/jsx-if-require-condition": 1,
        "jsx-control-statements/jsx-otherwise-once-last": 1,
        "jsx-control-statements/jsx-use-if-tag": 1,
        "jsx-control-statements/jsx-when-require-condition": 1,
        "react/jsx-no-undef": ["error", { "allowGlobals": true }]
    }
}